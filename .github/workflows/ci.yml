name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format clang-tidy

      - name: Check code formatting
        run: |
          # Find all .c and .h files and check their formatting
          find source includes -name "*.c" -o -name "*.h" | xargs clang-format -i -style=file
          # Check if there are any changes after formatting
          git diff --exit-code || {
            echo "‚ùå Code formatting check failed. Please run 'just format' locally and commit the changes.";
            exit 1;
          }

      - name: Setup build for clang-tidy
        run: |
          sudo apt-get install -y meson ninja-build libpcre2-dev
          meson setup .build

      - name: Run static analysis
        run: |
          find source -name "*.c" | xargs clang-tidy -p .build --config-file=.clang-tidy

  build:
    name: Build
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, fedora]
        compiler: [gcc, clang]
        build_type: [release]
        include:
          - os: ubuntu-latest
            build_type: debugoptimized
          - os: macos-latest
            build_type: debugoptimized
        exclude:
          - os: fedora
            compiler: clang

    runs-on: ${{ matrix.os == 'fedora' && 'ubuntu-latest' || matrix.os }}
    container: ${{ matrix.os == 'fedora' && 'fedora:latest' || null }}

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y meson ninja-build libpcre2-dev libcriterion-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install meson ninja pcre2 criterion

      - name: Install dependencies (Fedora)
        if: matrix.os == 'fedora'
        run: |
          dnf install -y meson ninja-build gcc clang pcre2-devel

      - name: Configure and build
        run: |
          meson setup -Dtests=${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }} -Dexamples=true -Dbuildtype=${{ matrix.build_type }} .build
          meson compile -C .build
        env:
          CC: ${{ matrix.compiler }}

      - name: Upload build artifacts
        if: matrix.os != 'fedora'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: |
            .build/lib*.so
            .build/lib*.a
            .build/lib*.dylib
          retention-days: 1

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y meson ninja-build libpcre2-dev libcriterion-dev

      - name: Configure
        run: meson setup -Dtests=true -Dexamples=true .build

      - name: Compile
        run: meson compile -C .build

      - name: Run unit tests
        run: meson test -C .build --suite unit -v

      - name: Run integration tests
        run: meson test -C .build --suite integration -v

      - name: Run functional tests
        run: meson test -C .build --suite functional -v

      - name: Generate test coverage report
        run: |
          sudo apt-get install -y gcovr
          meson configure -Db_coverage=true .build
          ninja -C .build coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: .build/meson-logs/coverage/
          retention-days: 5
